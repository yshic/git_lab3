
MCU_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be4  08002be4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002be4  08002be4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be4  08002be4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  08002c60  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002c60  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000839e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7d  00000000  00000000  0002847e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bd  00000000  00000000  0002aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ae1  00000000  00000000  0002b1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba7d  00000000  00000000  00041cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082331  00000000  00000000  0004d743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000283c  00000000  00000000  000cfa74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d22b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ba4 	.word	0x08002ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002ba4 	.word	0x08002ba4

0800014c <isBTPressed>:
int KeyReg3[NUM_BUTTONS] = {NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTONS] =  {500};
int BT_flag[NUM_BUTTONS] = {0};

int isBTPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (BT_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isBTPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isBTPressed+0x22>
		BT_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isBTPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isBTPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	BT_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e076      	b.n	800029a <getKeyInput+0xfa>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(btPort[i], btArr[i]);
 80001cc:	4a3a      	ldr	r2, [pc, #232]	; (80002b8 <getKeyInput+0x118>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4939      	ldr	r1, [pc, #228]	; (80002bc <getKeyInput+0x11c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 fca6 	bl	8001b30 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a32      	ldr	r2, [pc, #200]	; (80002b4 <getKeyInput+0x114>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a2e      	ldr	r2, [pc, #184]	; (80002ac <getKeyInput+0x10c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	492e      	ldr	r1, [pc, #184]	; (80002b4 <getKeyInput+0x114>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d147      	bne.n	8000294 <getKeyInput+0xf4>
 8000204:	4a29      	ldr	r2, [pc, #164]	; (80002ac <getKeyInput+0x10c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4928      	ldr	r1, [pc, #160]	; (80002b0 <getKeyInput+0x110>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d13d      	bne.n	8000294 <getKeyInput+0xf4>
			if (KeyReg2[i] != KeyReg3[i]){
 8000218:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <getKeyInput+0x110>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4927      	ldr	r1, [pc, #156]	; (80002c0 <getKeyInput+0x120>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a20      	ldr	r2, [pc, #128]	; (80002b0 <getKeyInput+0x110>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4922      	ldr	r1, [pc, #136]	; (80002c0 <getKeyInput+0x120>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 800023c:	4a20      	ldr	r2, [pc, #128]	; (80002c0 <getKeyInput+0x120>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d125      	bne.n	8000294 <getKeyInput+0xf4>
						TimeOutForKeyPress[i] = 200;
 8000248:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <getKeyInput+0x124>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	21c8      	movs	r1, #200	; 0xc8
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff94 	bl	8000180 <subKeyProcess>
 8000258:	e01c      	b.n	8000294 <getKeyInput+0xf4>
				}
			}else{
				TimeOutForKeyPress[i]--;
 800025a:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <getKeyInput+0x124>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4917      	ldr	r1, [pc, #92]	; (80002c4 <getKeyInput+0x124>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026c:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <getKeyInput+0x124>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d10d      	bne.n	8000294 <getKeyInput+0xf4>
					TimeOutForKeyPress[i] = 200;
 8000278:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <getKeyInput+0x124>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(KeyReg0[i] == PRESSED_STATE){
 8000282:	4a0c      	ldr	r2, [pc, #48]	; (80002b4 <getKeyInput+0x114>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d102      	bne.n	8000294 <getKeyInput+0xf4>
						subKeyProcess(i);
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ff76 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < NUM_BUTTONS; i++){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd85      	ble.n	80001ac <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000020 	.word	0x20000020
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	20000014 	.word	0x20000014
 80002b8:	20000008 	.word	0x20000008
 80002bc:	20000000 	.word	0x20000000
 80002c0:	20000038 	.word	0x20000038
 80002c4:	20000044 	.word	0x20000044

080002c8 <fsm_automatic_run>:
#include "global.h"

int counter1 = 0;
int counter2 = 0;

void fsm_automatic_run(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	switch(status){
 80002cc:	4b86      	ldr	r3, [pc, #536]	; (80004e8 <fsm_automatic_run+0x220>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	f200 8205 	bhi.w	80006e2 <fsm_automatic_run+0x41a>
 80002d8:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <fsm_automatic_run+0x18>)
 80002da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002de:	bf00      	nop
 80002e0:	080002f5 	.word	0x080002f5
 80002e4:	08000343 	.word	0x08000343
 80002e8:	08000415 	.word	0x08000415
 80002ec:	0800050d 	.word	0x0800050d
 80002f0:	0800060b 	.word	0x0800060b
	case INIT:
		status = AUTO_RED;
 80002f4:	4b7c      	ldr	r3, [pc, #496]	; (80004e8 <fsm_automatic_run+0x220>)
 80002f6:	2202      	movs	r2, #2
 80002f8:	601a      	str	r2, [r3, #0]
		setTimer( (red - amber) * 1000, 0); //timer for traffic light
 80002fa:	4b7c      	ldr	r3, [pc, #496]	; (80004ec <fsm_automatic_run+0x224>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b7c      	ldr	r3, [pc, #496]	; (80004f0 <fsm_automatic_run+0x228>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000308:	fb02 f303 	mul.w	r3, r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f001 f836 	bl	8001380 <setTimer>
		setTimer(500, 1);					//timer for updateCounterBuffer
 8000314:	2101      	movs	r1, #1
 8000316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031a:	f001 f831 	bl	8001380 <setTimer>
		setTimer(100, 2);					//timer for update7SEG
 800031e:	2102      	movs	r1, #2
 8000320:	2064      	movs	r0, #100	; 0x64
 8000322:	f001 f82d 	bl	8001380 <setTimer>
		setTimer(1000, 3);					//timer for counter1, counter2 decrement
 8000326:	2103      	movs	r1, #3
 8000328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032c:	f001 f828 	bl	8001380 <setTimer>
		counter1 = red;
 8000330:	4b6e      	ldr	r3, [pc, #440]	; (80004ec <fsm_automatic_run+0x224>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a6f      	ldr	r2, [pc, #444]	; (80004f4 <fsm_automatic_run+0x22c>)
 8000336:	6013      	str	r3, [r2, #0]
		counter2 = green;
 8000338:	4b6f      	ldr	r3, [pc, #444]	; (80004f8 <fsm_automatic_run+0x230>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a6f      	ldr	r2, [pc, #444]	; (80004fc <fsm_automatic_run+0x234>)
 800033e:	6013      	str	r3, [r2, #0]
		break;
 8000340:	e1d8      	b.n	80006f4 <fsm_automatic_run+0x42c>
	case AUTO_RED:
		controlTrafficLights(0, RED);
 8000342:	2100      	movs	r1, #0
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fe05 	bl	8000f54 <controlTrafficLights>
		controlTrafficLights(1, GREEN);
 800034a:	2101      	movs	r1, #1
 800034c:	2001      	movs	r0, #1
 800034e:	f000 fe01 	bl	8000f54 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000352:	4b6b      	ldr	r3, [pc, #428]	; (8000500 <fsm_automatic_run+0x238>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d110      	bne.n	800037c <fsm_automatic_run+0xb4>
			status = AUTO_RED1_AMBER2;
 800035a:	4b63      	ldr	r3, [pc, #396]	; (80004e8 <fsm_automatic_run+0x220>)
 800035c:	2205      	movs	r2, #5
 800035e:	601a      	str	r2, [r3, #0]
			counter2 = amber;
 8000360:	4b63      	ldr	r3, [pc, #396]	; (80004f0 <fsm_automatic_run+0x228>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a65      	ldr	r2, [pc, #404]	; (80004fc <fsm_automatic_run+0x234>)
 8000366:	6013      	str	r3, [r2, #0]
			setTimer(amber * 1000, 0);
 8000368:	4b61      	ldr	r3, [pc, #388]	; (80004f0 <fsm_automatic_run+0x228>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000370:	fb02 f303 	mul.w	r3, r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f001 f802 	bl	8001380 <setTimer>
		}
		if(timer_flag[1] == 1){
 800037c:	4b60      	ldr	r3, [pc, #384]	; (8000500 <fsm_automatic_run+0x238>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10c      	bne.n	800039e <fsm_automatic_run+0xd6>
			updateCounterBuffer(counter1, counter2);
 8000384:	4b5b      	ldr	r3, [pc, #364]	; (80004f4 <fsm_automatic_run+0x22c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a5c      	ldr	r2, [pc, #368]	; (80004fc <fsm_automatic_run+0x234>)
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fda4 	bl	8000edc <updateCounterBuffer>
			setTimer(500, 1);
 8000394:	2101      	movs	r1, #1
 8000396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800039a:	f000 fff1 	bl	8001380 <setTimer>
		}
		if(timer_flag[2] == 1){
 800039e:	4b58      	ldr	r3, [pc, #352]	; (8000500 <fsm_automatic_run+0x238>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d116      	bne.n	80003d4 <fsm_automatic_run+0x10c>
			setTimer(100, 2);
 80003a6:	2102      	movs	r1, #2
 80003a8:	2064      	movs	r0, #100	; 0x64
 80003aa:	f000 ffe9 	bl	8001380 <setTimer>
			update7SEG(index_led);
 80003ae:	4b55      	ldr	r3, [pc, #340]	; (8000504 <fsm_automatic_run+0x23c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fcf4 	bl	8000da0 <update7SEG>
			index_led++;
 80003b8:	4b52      	ldr	r3, [pc, #328]	; (8000504 <fsm_automatic_run+0x23c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	3301      	adds	r3, #1
 80003be:	4a51      	ldr	r2, [pc, #324]	; (8000504 <fsm_automatic_run+0x23c>)
 80003c0:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED){index_led = 0;}
 80003c2:	4b50      	ldr	r3, [pc, #320]	; (8000504 <fsm_automatic_run+0x23c>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	4b50      	ldr	r3, [pc, #320]	; (8000508 <fsm_automatic_run+0x240>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	db02      	blt.n	80003d4 <fsm_automatic_run+0x10c>
 80003ce:	4b4d      	ldr	r3, [pc, #308]	; (8000504 <fsm_automatic_run+0x23c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80003d4:	4b4a      	ldr	r3, [pc, #296]	; (8000500 <fsm_automatic_run+0x238>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d10e      	bne.n	80003fa <fsm_automatic_run+0x132>
			counter1--;
 80003dc:	4b45      	ldr	r3, [pc, #276]	; (80004f4 <fsm_automatic_run+0x22c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4a44      	ldr	r2, [pc, #272]	; (80004f4 <fsm_automatic_run+0x22c>)
 80003e4:	6013      	str	r3, [r2, #0]
			counter2--;
 80003e6:	4b45      	ldr	r3, [pc, #276]	; (80004fc <fsm_automatic_run+0x234>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	4a43      	ldr	r2, [pc, #268]	; (80004fc <fsm_automatic_run+0x234>)
 80003ee:	6013      	str	r3, [r2, #0]
			setTimer(1000, 3);
 80003f0:	2103      	movs	r1, #3
 80003f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f6:	f000 ffc3 	bl	8001380 <setTimer>
		}
		if(isBTPressed(0) == 1){
 80003fa:	2000      	movs	r0, #0
 80003fc:	f7ff fea6 	bl	800014c <isBTPressed>
 8000400:	4603      	mov	r3, r0
 8000402:	2b01      	cmp	r3, #1
 8000404:	f040 816f 	bne.w	80006e6 <fsm_automatic_run+0x41e>
			status = MANUAL_INIT;
 8000408:	4b37      	ldr	r3, [pc, #220]	; (80004e8 <fsm_automatic_run+0x220>)
 800040a:	2206      	movs	r2, #6
 800040c:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 800040e:	f000 fe35 	bl	800107c <clearTrafficLights>
		}
		break;
 8000412:	e168      	b.n	80006e6 <fsm_automatic_run+0x41e>
	case AUTO_GREEN:
		controlTrafficLights(0, GREEN);
 8000414:	2101      	movs	r1, #1
 8000416:	2000      	movs	r0, #0
 8000418:	f000 fd9c 	bl	8000f54 <controlTrafficLights>
		controlTrafficLights(1, RED);
 800041c:	2100      	movs	r1, #0
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fd98 	bl	8000f54 <controlTrafficLights>
		if(timer_flag[0] == 1){
 8000424:	4b36      	ldr	r3, [pc, #216]	; (8000500 <fsm_automatic_run+0x238>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d110      	bne.n	800044e <fsm_automatic_run+0x186>
			counter1 = amber;
 800042c:	4b30      	ldr	r3, [pc, #192]	; (80004f0 <fsm_automatic_run+0x228>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a30      	ldr	r2, [pc, #192]	; (80004f4 <fsm_automatic_run+0x22c>)
 8000432:	6013      	str	r3, [r2, #0]
			status = AUTO_AMBER;
 8000434:	4b2c      	ldr	r3, [pc, #176]	; (80004e8 <fsm_automatic_run+0x220>)
 8000436:	2204      	movs	r2, #4
 8000438:	601a      	str	r2, [r3, #0]
			setTimer(amber * 1000, 0);
 800043a:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <fsm_automatic_run+0x228>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f000 ff99 	bl	8001380 <setTimer>
		}
		if(timer_flag[1] == 1){
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <fsm_automatic_run+0x238>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d10c      	bne.n	8000470 <fsm_automatic_run+0x1a8>
			updateCounterBuffer(counter1, counter2);
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <fsm_automatic_run+0x22c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a28      	ldr	r2, [pc, #160]	; (80004fc <fsm_automatic_run+0x234>)
 800045c:	6812      	ldr	r2, [r2, #0]
 800045e:	4611      	mov	r1, r2
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fd3b 	bl	8000edc <updateCounterBuffer>
			setTimer(500, 1);
 8000466:	2101      	movs	r1, #1
 8000468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800046c:	f000 ff88 	bl	8001380 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000470:	4b23      	ldr	r3, [pc, #140]	; (8000500 <fsm_automatic_run+0x238>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d116      	bne.n	80004a6 <fsm_automatic_run+0x1de>
			setTimer(100, 2);
 8000478:	2102      	movs	r1, #2
 800047a:	2064      	movs	r0, #100	; 0x64
 800047c:	f000 ff80 	bl	8001380 <setTimer>
			update7SEG(index_led);
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <fsm_automatic_run+0x23c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fc8b 	bl	8000da0 <update7SEG>
			index_led++;
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <fsm_automatic_run+0x23c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <fsm_automatic_run+0x23c>)
 8000492:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED){index_led = 0;}
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <fsm_automatic_run+0x23c>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <fsm_automatic_run+0x240>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	db02      	blt.n	80004a6 <fsm_automatic_run+0x1de>
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <fsm_automatic_run+0x23c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <fsm_automatic_run+0x238>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d10e      	bne.n	80004cc <fsm_automatic_run+0x204>
			counter1--;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <fsm_automatic_run+0x22c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <fsm_automatic_run+0x22c>)
 80004b6:	6013      	str	r3, [r2, #0]
			counter2--;
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <fsm_automatic_run+0x234>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	3b01      	subs	r3, #1
 80004be:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <fsm_automatic_run+0x234>)
 80004c0:	6013      	str	r3, [r2, #0]
			setTimer(1000, 3);
 80004c2:	2103      	movs	r1, #3
 80004c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c8:	f000 ff5a 	bl	8001380 <setTimer>
		}
		if(isBTPressed(0) == 1){
 80004cc:	2000      	movs	r0, #0
 80004ce:	f7ff fe3d 	bl	800014c <isBTPressed>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	f040 8108 	bne.w	80006ea <fsm_automatic_run+0x422>
			status = MANUAL_INIT;
 80004da:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <fsm_automatic_run+0x220>)
 80004dc:	2206      	movs	r2, #6
 80004de:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 80004e0:	f000 fdcc 	bl	800107c <clearTrafficLights>
		}
		break;
 80004e4:	e101      	b.n	80006ea <fsm_automatic_run+0x422>
 80004e6:	bf00      	nop
 80004e8:	200000a4 	.word	0x200000a4
 80004ec:	2000005c 	.word	0x2000005c
 80004f0:	20000064 	.word	0x20000064
 80004f4:	2000009c 	.word	0x2000009c
 80004f8:	20000060 	.word	0x20000060
 80004fc:	200000a0 	.word	0x200000a0
 8000500:	20000144 	.word	0x20000144
 8000504:	200000b8 	.word	0x200000b8
 8000508:	08002bbc 	.word	0x08002bbc
	case AUTO_AMBER:
		controlTrafficLights(0, AMBER);
 800050c:	2102      	movs	r1, #2
 800050e:	2000      	movs	r0, #0
 8000510:	f000 fd20 	bl	8000f54 <controlTrafficLights>
		controlTrafficLights(1, RED);
 8000514:	2100      	movs	r1, #0
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fd1c 	bl	8000f54 <controlTrafficLights>
		if(timer_flag[0] == 1){
 800051c:	4b76      	ldr	r3, [pc, #472]	; (80006f8 <fsm_automatic_run+0x430>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d117      	bne.n	8000554 <fsm_automatic_run+0x28c>
			counter1 = red;
 8000524:	4b75      	ldr	r3, [pc, #468]	; (80006fc <fsm_automatic_run+0x434>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a75      	ldr	r2, [pc, #468]	; (8000700 <fsm_automatic_run+0x438>)
 800052a:	6013      	str	r3, [r2, #0]
			counter2 = green;
 800052c:	4b75      	ldr	r3, [pc, #468]	; (8000704 <fsm_automatic_run+0x43c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a75      	ldr	r2, [pc, #468]	; (8000708 <fsm_automatic_run+0x440>)
 8000532:	6013      	str	r3, [r2, #0]
			status = AUTO_RED;
 8000534:	4b75      	ldr	r3, [pc, #468]	; (800070c <fsm_automatic_run+0x444>)
 8000536:	2202      	movs	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
			setTimer((red - amber) * 1000, 0);
 800053a:	4b70      	ldr	r3, [pc, #448]	; (80006fc <fsm_automatic_run+0x434>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b74      	ldr	r3, [pc, #464]	; (8000710 <fsm_automatic_run+0x448>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000548:	fb02 f303 	mul.w	r3, r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f000 ff16 	bl	8001380 <setTimer>
		}
		if(timer_flag[1] == 1){
 8000554:	4b68      	ldr	r3, [pc, #416]	; (80006f8 <fsm_automatic_run+0x430>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d10c      	bne.n	8000576 <fsm_automatic_run+0x2ae>
			updateCounterBuffer(counter1, counter2);
 800055c:	4b68      	ldr	r3, [pc, #416]	; (8000700 <fsm_automatic_run+0x438>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a69      	ldr	r2, [pc, #420]	; (8000708 <fsm_automatic_run+0x440>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fcb8 	bl	8000edc <updateCounterBuffer>
			setTimer(500, 1);
 800056c:	2101      	movs	r1, #1
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f000 ff05 	bl	8001380 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000576:	4b60      	ldr	r3, [pc, #384]	; (80006f8 <fsm_automatic_run+0x430>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d116      	bne.n	80005ac <fsm_automatic_run+0x2e4>
			setTimer(100, 2);
 800057e:	2102      	movs	r1, #2
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 fefd 	bl	8001380 <setTimer>
			update7SEG(index_led);
 8000586:	4b63      	ldr	r3, [pc, #396]	; (8000714 <fsm_automatic_run+0x44c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fc08 	bl	8000da0 <update7SEG>
			index_led++;
 8000590:	4b60      	ldr	r3, [pc, #384]	; (8000714 <fsm_automatic_run+0x44c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a5f      	ldr	r2, [pc, #380]	; (8000714 <fsm_automatic_run+0x44c>)
 8000598:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED){index_led = 0;}
 800059a:	4b5e      	ldr	r3, [pc, #376]	; (8000714 <fsm_automatic_run+0x44c>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b5e      	ldr	r3, [pc, #376]	; (8000718 <fsm_automatic_run+0x450>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	db02      	blt.n	80005ac <fsm_automatic_run+0x2e4>
 80005a6:	4b5b      	ldr	r3, [pc, #364]	; (8000714 <fsm_automatic_run+0x44c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80005ac:	4b52      	ldr	r3, [pc, #328]	; (80006f8 <fsm_automatic_run+0x430>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d11e      	bne.n	80005f2 <fsm_automatic_run+0x32a>
			counter1--;
 80005b4:	4b52      	ldr	r3, [pc, #328]	; (8000700 <fsm_automatic_run+0x438>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	4a51      	ldr	r2, [pc, #324]	; (8000700 <fsm_automatic_run+0x438>)
 80005bc:	6013      	str	r3, [r2, #0]
			counter2--;
 80005be:	4b52      	ldr	r3, [pc, #328]	; (8000708 <fsm_automatic_run+0x440>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a50      	ldr	r2, [pc, #320]	; (8000708 <fsm_automatic_run+0x440>)
 80005c6:	6013      	str	r3, [r2, #0]
			if (counter1 == 0) counter1 = red;
 80005c8:	4b4d      	ldr	r3, [pc, #308]	; (8000700 <fsm_automatic_run+0x438>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d103      	bne.n	80005d8 <fsm_automatic_run+0x310>
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <fsm_automatic_run+0x434>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a4a      	ldr	r2, [pc, #296]	; (8000700 <fsm_automatic_run+0x438>)
 80005d6:	6013      	str	r3, [r2, #0]
			if (counter2 == 0) counter2 = green;
 80005d8:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <fsm_automatic_run+0x440>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d103      	bne.n	80005e8 <fsm_automatic_run+0x320>
 80005e0:	4b48      	ldr	r3, [pc, #288]	; (8000704 <fsm_automatic_run+0x43c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a48      	ldr	r2, [pc, #288]	; (8000708 <fsm_automatic_run+0x440>)
 80005e6:	6013      	str	r3, [r2, #0]
			setTimer(1000, 3);
 80005e8:	2103      	movs	r1, #3
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fec7 	bl	8001380 <setTimer>
		}
		if(isBTPressed(0) == 1){
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fdaa 	bl	800014c <isBTPressed>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d177      	bne.n	80006ee <fsm_automatic_run+0x426>
			status = MANUAL_INIT;
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <fsm_automatic_run+0x444>)
 8000600:	2206      	movs	r2, #6
 8000602:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 8000604:	f000 fd3a 	bl	800107c <clearTrafficLights>
		}
		break;
 8000608:	e071      	b.n	80006ee <fsm_automatic_run+0x426>
	case AUTO_RED1_AMBER2:
		controlTrafficLights(0, RED);
 800060a:	2100      	movs	r1, #0
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fca1 	bl	8000f54 <controlTrafficLights>
		controlTrafficLights(1, AMBER);
 8000612:	2102      	movs	r1, #2
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fc9d 	bl	8000f54 <controlTrafficLights>
		if(timer_flag[0] == 1){
 800061a:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <fsm_automatic_run+0x430>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d114      	bne.n	800064c <fsm_automatic_run+0x384>
			counter1 = green;
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <fsm_automatic_run+0x43c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a36      	ldr	r2, [pc, #216]	; (8000700 <fsm_automatic_run+0x438>)
 8000628:	6013      	str	r3, [r2, #0]
			counter2 = red;
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <fsm_automatic_run+0x434>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a36      	ldr	r2, [pc, #216]	; (8000708 <fsm_automatic_run+0x440>)
 8000630:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN;
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <fsm_automatic_run+0x444>)
 8000634:	2203      	movs	r2, #3
 8000636:	601a      	str	r2, [r3, #0]
			setTimer(green * 1000, 0);
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <fsm_automatic_run+0x43c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fe9a 	bl	8001380 <setTimer>
		}
		if(timer_flag[1] == 1){
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <fsm_automatic_run+0x430>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d10c      	bne.n	800066e <fsm_automatic_run+0x3a6>
			updateCounterBuffer(counter1, counter2);
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <fsm_automatic_run+0x438>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2b      	ldr	r2, [pc, #172]	; (8000708 <fsm_automatic_run+0x440>)
 800065a:	6812      	ldr	r2, [r2, #0]
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fc3c 	bl	8000edc <updateCounterBuffer>
			setTimer(500, 1);
 8000664:	2101      	movs	r1, #1
 8000666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066a:	f000 fe89 	bl	8001380 <setTimer>
		}
		if(timer_flag[2] == 1){
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <fsm_automatic_run+0x430>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d116      	bne.n	80006a4 <fsm_automatic_run+0x3dc>
			setTimer(100, 2);
 8000676:	2102      	movs	r1, #2
 8000678:	2064      	movs	r0, #100	; 0x64
 800067a:	f000 fe81 	bl	8001380 <setTimer>
			update7SEG(index_led);
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <fsm_automatic_run+0x44c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fb8c 	bl	8000da0 <update7SEG>
			index_led++;
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <fsm_automatic_run+0x44c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a21      	ldr	r2, [pc, #132]	; (8000714 <fsm_automatic_run+0x44c>)
 8000690:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED){index_led = 0;}
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <fsm_automatic_run+0x44c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <fsm_automatic_run+0x450>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	429a      	cmp	r2, r3
 800069c:	db02      	blt.n	80006a4 <fsm_automatic_run+0x3dc>
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <fsm_automatic_run+0x44c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <fsm_automatic_run+0x430>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10e      	bne.n	80006ca <fsm_automatic_run+0x402>
			counter1--;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <fsm_automatic_run+0x438>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <fsm_automatic_run+0x438>)
 80006b4:	6013      	str	r3, [r2, #0]
			counter2--;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <fsm_automatic_run+0x440>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <fsm_automatic_run+0x440>)
 80006be:	6013      	str	r3, [r2, #0]
			setTimer(1000, 3);
 80006c0:	2103      	movs	r1, #3
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	f000 fe5b 	bl	8001380 <setTimer>
		}
		if(isBTPressed(0) == 1){
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fd3e 	bl	800014c <isBTPressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d10d      	bne.n	80006f2 <fsm_automatic_run+0x42a>
			status = MANUAL_INIT;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <fsm_automatic_run+0x444>)
 80006d8:	2206      	movs	r2, #6
 80006da:	601a      	str	r2, [r3, #0]
			clearTrafficLights();
 80006dc:	f000 fcce 	bl	800107c <clearTrafficLights>
		}
		break;
 80006e0:	e007      	b.n	80006f2 <fsm_automatic_run+0x42a>
	default:
		break;
 80006e2:	bf00      	nop
 80006e4:	e006      	b.n	80006f4 <fsm_automatic_run+0x42c>
		break;
 80006e6:	bf00      	nop
 80006e8:	e004      	b.n	80006f4 <fsm_automatic_run+0x42c>
		break;
 80006ea:	bf00      	nop
 80006ec:	e002      	b.n	80006f4 <fsm_automatic_run+0x42c>
		break;
 80006ee:	bf00      	nop
 80006f0:	e000      	b.n	80006f4 <fsm_automatic_run+0x42c>
		break;
 80006f2:	bf00      	nop
	}
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000144 	.word	0x20000144
 80006fc:	2000005c 	.word	0x2000005c
 8000700:	2000009c 	.word	0x2000009c
 8000704:	20000060 	.word	0x20000060
 8000708:	200000a0 	.word	0x200000a0
 800070c:	200000a4 	.word	0x200000a4
 8000710:	20000064 	.word	0x20000064
 8000714:	200000b8 	.word	0x200000b8
 8000718:	08002bbc 	.word	0x08002bbc

0800071c <ledBalance>:

int redTemp = 1;
int greenTemp = 1;
int amberTemp = 1;

void ledBalance(){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	if(red == (green + amber)) return;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <ledBalance+0x50>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <ledBalance+0x54>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	441a      	add	r2, r3
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <ledBalance+0x58>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	d018      	beq.n	8000764 <ledBalance+0x48>
	else if(red > (green + amber)){
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <ledBalance+0x50>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <ledBalance+0x54>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	441a      	add	r2, r3
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <ledBalance+0x58>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	da07      	bge.n	8000754 <ledBalance+0x38>
		red = green + amber;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <ledBalance+0x50>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <ledBalance+0x54>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4413      	add	r3, r2
 800074e:	4a09      	ldr	r2, [pc, #36]	; (8000774 <ledBalance+0x58>)
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e008      	b.n	8000766 <ledBalance+0x4a>
	}
	else{
		green = red - amber;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <ledBalance+0x58>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <ledBalance+0x54>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a03      	ldr	r2, [pc, #12]	; (800076c <ledBalance+0x50>)
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e000      	b.n	8000766 <ledBalance+0x4a>
	if(red == (green + amber)) return;
 8000764:	bf00      	nop
	}
}
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000060 	.word	0x20000060
 8000770:	20000064 	.word	0x20000064
 8000774:	2000005c 	.word	0x2000005c

08000778 <fsm_manual_run>:

void fsm_manual_run(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	switch(status){
 800077c:	4ba5      	ldr	r3, [pc, #660]	; (8000a14 <fsm_manual_run+0x29c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b06      	subs	r3, #6
 8000782:	2b03      	cmp	r3, #3
 8000784:	f200 813c 	bhi.w	8000a00 <fsm_manual_run+0x288>
 8000788:	a201      	add	r2, pc, #4	; (adr r2, 8000790 <fsm_manual_run+0x18>)
 800078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078e:	bf00      	nop
 8000790:	080007a1 	.word	0x080007a1
 8000794:	080007c3 	.word	0x080007c3
 8000798:	08000885 	.word	0x08000885
 800079c:	08000941 	.word	0x08000941
	case MANUAL_INIT:
		status = MANUAL_RED;
 80007a0:	4b9c      	ldr	r3, [pc, #624]	; (8000a14 <fsm_manual_run+0x29c>)
 80007a2:	2207      	movs	r2, #7
 80007a4:	601a      	str	r2, [r3, #0]
		setTimer(500, 1);		//timer for updateCounterBuffer()
 80007a6:	2101      	movs	r1, #1
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f000 fde8 	bl	8001380 <setTimer>
		setTimer(100, 2);		//timer for update7SEG()
 80007b0:	2102      	movs	r1, #2
 80007b2:	2064      	movs	r0, #100	; 0x64
 80007b4:	f000 fde4 	bl	8001380 <setTimer>
		setTimer(250, 3);		//timer for led blinking
 80007b8:	2103      	movs	r1, #3
 80007ba:	20fa      	movs	r0, #250	; 0xfa
 80007bc:	f000 fde0 	bl	8001380 <setTimer>
		break;
 80007c0:	e125      	b.n	8000a0e <fsm_manual_run+0x296>
	case MANUAL_RED:
		if(timer_flag[1] == 1){
 80007c2:	4b95      	ldr	r3, [pc, #596]	; (8000a18 <fsm_manual_run+0x2a0>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d10a      	bne.n	80007e0 <fsm_manual_run+0x68>
			updateCounterBuffer(redTemp, 2);
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <fsm_manual_run+0x2a4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fb83 	bl	8000edc <updateCounterBuffer>
			setTimer(500, 1);
 80007d6:	2101      	movs	r1, #1
 80007d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007dc:	f000 fdd0 	bl	8001380 <setTimer>
		}
		if(timer_flag[2] == 1){
 80007e0:	4b8d      	ldr	r3, [pc, #564]	; (8000a18 <fsm_manual_run+0x2a0>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d116      	bne.n	8000816 <fsm_manual_run+0x9e>
			setTimer(100, 2);
 80007e8:	2102      	movs	r1, #2
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f000 fdc8 	bl	8001380 <setTimer>
			update7SEG(index_led);
 80007f0:	4b8b      	ldr	r3, [pc, #556]	; (8000a20 <fsm_manual_run+0x2a8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fad3 	bl	8000da0 <update7SEG>
			index_led++;
 80007fa:	4b89      	ldr	r3, [pc, #548]	; (8000a20 <fsm_manual_run+0x2a8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	4a87      	ldr	r2, [pc, #540]	; (8000a20 <fsm_manual_run+0x2a8>)
 8000802:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED){index_led = 0;}
 8000804:	4b86      	ldr	r3, [pc, #536]	; (8000a20 <fsm_manual_run+0x2a8>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b86      	ldr	r3, [pc, #536]	; (8000a24 <fsm_manual_run+0x2ac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	db02      	blt.n	8000816 <fsm_manual_run+0x9e>
 8000810:	4b83      	ldr	r3, [pc, #524]	; (8000a20 <fsm_manual_run+0x2a8>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000816:	4b80      	ldr	r3, [pc, #512]	; (8000a18 <fsm_manual_run+0x2a0>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d105      	bne.n	800082a <fsm_manual_run+0xb2>
			toggleRedLED();
 800081e:	f000 fc53 	bl	80010c8 <toggleRedLED>
			setTimer(250, 3);
 8000822:	2103      	movs	r1, #3
 8000824:	20fa      	movs	r0, #250	; 0xfa
 8000826:	f000 fdab 	bl	8001380 <setTimer>
		}
		if(isBTPressed(0) == 1){
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fc8e 	bl	800014c <isBTPressed>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d108      	bne.n	8000848 <fsm_manual_run+0xd0>
			status = MANUAL_AMBER;
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <fsm_manual_run+0x29c>)
 8000838:	2209      	movs	r2, #9
 800083a:	601a      	str	r2, [r3, #0]
			setTimer(250, 2);
 800083c:	2102      	movs	r1, #2
 800083e:	20fa      	movs	r0, #250	; 0xfa
 8000840:	f000 fd9e 	bl	8001380 <setTimer>
			clearTrafficLights();
 8000844:	f000 fc1a 	bl	800107c <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff fc7f 	bl	800014c <isBTPressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d10b      	bne.n	800086c <fsm_manual_run+0xf4>
			redTemp++;
 8000854:	4b71      	ldr	r3, [pc, #452]	; (8000a1c <fsm_manual_run+0x2a4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a70      	ldr	r2, [pc, #448]	; (8000a1c <fsm_manual_run+0x2a4>)
 800085c:	6013      	str	r3, [r2, #0]
			if(redTemp > 99) redTemp = 1;
 800085e:	4b6f      	ldr	r3, [pc, #444]	; (8000a1c <fsm_manual_run+0x2a4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b63      	cmp	r3, #99	; 0x63
 8000864:	dd02      	ble.n	800086c <fsm_manual_run+0xf4>
 8000866:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <fsm_manual_run+0x2a4>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
		}
		if(isBTPressed(2) == 1){
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff fc6d 	bl	800014c <isBTPressed>
 8000872:	4603      	mov	r3, r0
 8000874:	2b01      	cmp	r3, #1
 8000876:	f040 80c5 	bne.w	8000a04 <fsm_manual_run+0x28c>
			red = redTemp;
 800087a:	4b68      	ldr	r3, [pc, #416]	; (8000a1c <fsm_manual_run+0x2a4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a6a      	ldr	r2, [pc, #424]	; (8000a28 <fsm_manual_run+0x2b0>)
 8000880:	6013      	str	r3, [r2, #0]
		}
		break;
 8000882:	e0bf      	b.n	8000a04 <fsm_manual_run+0x28c>
	case MANUAL_GREEN:
		if(timer_flag[1] == 1){
 8000884:	4b64      	ldr	r3, [pc, #400]	; (8000a18 <fsm_manual_run+0x2a0>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d10a      	bne.n	80008a2 <fsm_manual_run+0x12a>
			updateCounterBuffer(greenTemp, 4);
 800088c:	4b67      	ldr	r3, [pc, #412]	; (8000a2c <fsm_manual_run+0x2b4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fb22 	bl	8000edc <updateCounterBuffer>
			setTimer(500, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089e:	f000 fd6f 	bl	8001380 <setTimer>
		}
		if(timer_flag[2] == 1){
 80008a2:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <fsm_manual_run+0x2a0>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d116      	bne.n	80008d8 <fsm_manual_run+0x160>
			setTimer(100, 2);
 80008aa:	2102      	movs	r1, #2
 80008ac:	2064      	movs	r0, #100	; 0x64
 80008ae:	f000 fd67 	bl	8001380 <setTimer>
			update7SEG(index_led);
 80008b2:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <fsm_manual_run+0x2a8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fa72 	bl	8000da0 <update7SEG>
			index_led++;
 80008bc:	4b58      	ldr	r3, [pc, #352]	; (8000a20 <fsm_manual_run+0x2a8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a57      	ldr	r2, [pc, #348]	; (8000a20 <fsm_manual_run+0x2a8>)
 80008c4:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED){index_led = 0;}
 80008c6:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <fsm_manual_run+0x2a8>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <fsm_manual_run+0x2ac>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	db02      	blt.n	80008d8 <fsm_manual_run+0x160>
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <fsm_manual_run+0x2a8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80008d8:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <fsm_manual_run+0x2a0>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d105      	bne.n	80008ec <fsm_manual_run+0x174>
			toggleGreenLED();
 80008e0:	f000 fc00 	bl	80010e4 <toggleGreenLED>
			setTimer(250, 3);
 80008e4:	2103      	movs	r1, #3
 80008e6:	20fa      	movs	r0, #250	; 0xfa
 80008e8:	f000 fd4a 	bl	8001380 <setTimer>
		}
		if(isBTPressed(0) == 1){
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fc2d 	bl	800014c <isBTPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d106      	bne.n	8000906 <fsm_manual_run+0x18e>
			ledBalance();
 80008f8:	f7ff ff10 	bl	800071c <ledBalance>
			clearTrafficLights();
 80008fc:	f000 fbbe 	bl	800107c <clearTrafficLights>
			status = INIT;
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <fsm_manual_run+0x29c>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
		}
		if(isBTPressed(1) == 1){
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fc20 	bl	800014c <isBTPressed>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	d10b      	bne.n	800092a <fsm_manual_run+0x1b2>
			greenTemp++;
 8000912:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <fsm_manual_run+0x2b4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a44      	ldr	r2, [pc, #272]	; (8000a2c <fsm_manual_run+0x2b4>)
 800091a:	6013      	str	r3, [r2, #0]
			if(greenTemp > 99) greenTemp = 1;
 800091c:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <fsm_manual_run+0x2b4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b63      	cmp	r3, #99	; 0x63
 8000922:	dd02      	ble.n	800092a <fsm_manual_run+0x1b2>
 8000924:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <fsm_manual_run+0x2b4>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
		}
		if(isBTPressed(2) == 1){
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fc0e 	bl	800014c <isBTPressed>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d168      	bne.n	8000a08 <fsm_manual_run+0x290>
			green = greenTemp;
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <fsm_manual_run+0x2b4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <fsm_manual_run+0x2b8>)
 800093c:	6013      	str	r3, [r2, #0]
		}
		break;
 800093e:	e063      	b.n	8000a08 <fsm_manual_run+0x290>
	case MANUAL_AMBER:
		if(timer_flag[1] == 1){
 8000940:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <fsm_manual_run+0x2a0>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10a      	bne.n	800095e <fsm_manual_run+0x1e6>
			updateCounterBuffer(amberTemp, 3);
 8000948:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <fsm_manual_run+0x2bc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2103      	movs	r1, #3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fac4 	bl	8000edc <updateCounterBuffer>
			setTimer(500, 1);
 8000954:	2101      	movs	r1, #1
 8000956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095a:	f000 fd11 	bl	8001380 <setTimer>
		}
		if(timer_flag[2] == 1){
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <fsm_manual_run+0x2a0>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d116      	bne.n	8000994 <fsm_manual_run+0x21c>
			setTimer(100, 2);
 8000966:	2102      	movs	r1, #2
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	f000 fd09 	bl	8001380 <setTimer>
			update7SEG(index_led);
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <fsm_manual_run+0x2a8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fa14 	bl	8000da0 <update7SEG>
			index_led++;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <fsm_manual_run+0x2a8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <fsm_manual_run+0x2a8>)
 8000980:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED){index_led = 0;}
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <fsm_manual_run+0x2a8>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <fsm_manual_run+0x2ac>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	429a      	cmp	r2, r3
 800098c:	db02      	blt.n	8000994 <fsm_manual_run+0x21c>
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <fsm_manual_run+0x2a8>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <fsm_manual_run+0x2a0>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d105      	bne.n	80009a8 <fsm_manual_run+0x230>
			toggleAmberLED();
 800099c:	f000 fbb2 	bl	8001104 <toggleAmberLED>
			setTimer(250, 3);
 80009a0:	2103      	movs	r1, #3
 80009a2:	20fa      	movs	r0, #250	; 0xfa
 80009a4:	f000 fcec 	bl	8001380 <setTimer>
		}
		if(isBTPressed(0) == 1){
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fbcf 	bl	800014c <isBTPressed>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d108      	bne.n	80009c6 <fsm_manual_run+0x24e>
			status = MANUAL_GREEN;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <fsm_manual_run+0x29c>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	601a      	str	r2, [r3, #0]
			setTimer(250, 2);
 80009ba:	2102      	movs	r1, #2
 80009bc:	20fa      	movs	r0, #250	; 0xfa
 80009be:	f000 fcdf 	bl	8001380 <setTimer>
			clearTrafficLights();
 80009c2:	f000 fb5b 	bl	800107c <clearTrafficLights>
		}
		if(isBTPressed(1) == 1){
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fbc0 	bl	800014c <isBTPressed>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d10b      	bne.n	80009ea <fsm_manual_run+0x272>
			amberTemp++;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <fsm_manual_run+0x2bc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <fsm_manual_run+0x2bc>)
 80009da:	6013      	str	r3, [r2, #0]
			if(amberTemp > 99) amberTemp = 1;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <fsm_manual_run+0x2bc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b63      	cmp	r3, #99	; 0x63
 80009e2:	dd02      	ble.n	80009ea <fsm_manual_run+0x272>
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <fsm_manual_run+0x2bc>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
		}
		if(isBTPressed(2) == 1){
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fbae 	bl	800014c <isBTPressed>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d10a      	bne.n	8000a0c <fsm_manual_run+0x294>
			amber = amberTemp;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <fsm_manual_run+0x2bc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <fsm_manual_run+0x2c0>)
 80009fc:	6013      	str	r3, [r2, #0]
		}
		break;
 80009fe:	e005      	b.n	8000a0c <fsm_manual_run+0x294>
	default:
		break;
 8000a00:	bf00      	nop
 8000a02:	e004      	b.n	8000a0e <fsm_manual_run+0x296>
		break;
 8000a04:	bf00      	nop
 8000a06:	e002      	b.n	8000a0e <fsm_manual_run+0x296>
		break;
 8000a08:	bf00      	nop
 8000a0a:	e000      	b.n	8000a0e <fsm_manual_run+0x296>
		break;
 8000a0c:	bf00      	nop
	}
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000a4 	.word	0x200000a4
 8000a18:	20000144 	.word	0x20000144
 8000a1c:	20000050 	.word	0x20000050
 8000a20:	200000b8 	.word	0x200000b8
 8000a24:	08002bbc 	.word	0x08002bbc
 8000a28:	2000005c 	.word	0x2000005c
 8000a2c:	20000054 	.word	0x20000054
 8000a30:	20000060 	.word	0x20000060
 8000a34:	20000058 	.word	0x20000058
 8000a38:	20000064 	.word	0x20000064

08000a3c <display7SEG>:
int amber = 2;
const int MAX_LED = 4;
int led_buffer[4] = {0, 0, 0, 0};
int index_led = 0;

void display7SEG(int num){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	// 0/RESET = ON, 1/SET = OFF
	switch(num){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b09      	cmp	r3, #9
 8000a48:	f200 8180 	bhi.w	8000d4c <display7SEG+0x310>
 8000a4c:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <display7SEG+0x18>)
 8000a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a52:	bf00      	nop
 8000a54:	08000a7d 	.word	0x08000a7d
 8000a58:	08000ac5 	.word	0x08000ac5
 8000a5c:	08000b0d 	.word	0x08000b0d
 8000a60:	08000b55 	.word	0x08000b55
 8000a64:	08000b9d 	.word	0x08000b9d
 8000a68:	08000be5 	.word	0x08000be5
 8000a6c:	08000c2d 	.word	0x08000c2d
 8000a70:	08000c75 	.word	0x08000c75
 8000a74:	08000cbd 	.word	0x08000cbd
 8000a78:	08000d05 	.word	0x08000d05
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2101      	movs	r1, #1
 8000a80:	48c6      	ldr	r0, [pc, #792]	; (8000d9c <display7SEG+0x360>)
 8000a82:	f001 f86c 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	48c4      	ldr	r0, [pc, #784]	; (8000d9c <display7SEG+0x360>)
 8000a8c:	f001 f867 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2104      	movs	r1, #4
 8000a94:	48c1      	ldr	r0, [pc, #772]	; (8000d9c <display7SEG+0x360>)
 8000a96:	f001 f862 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	48bf      	ldr	r0, [pc, #764]	; (8000d9c <display7SEG+0x360>)
 8000aa0:	f001 f85d 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	48bc      	ldr	r0, [pc, #752]	; (8000d9c <display7SEG+0x360>)
 8000aaa:	f001 f858 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	48ba      	ldr	r0, [pc, #744]	; (8000d9c <display7SEG+0x360>)
 8000ab4:	f001 f853 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2140      	movs	r1, #64	; 0x40
 8000abc:	48b7      	ldr	r0, [pc, #732]	; (8000d9c <display7SEG+0x360>)
 8000abe:	f001 f84e 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000ac2:	e167      	b.n	8000d94 <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	48b4      	ldr	r0, [pc, #720]	; (8000d9c <display7SEG+0x360>)
 8000aca:	f001 f848 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	48b2      	ldr	r0, [pc, #712]	; (8000d9c <display7SEG+0x360>)
 8000ad4:	f001 f843 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	48af      	ldr	r0, [pc, #700]	; (8000d9c <display7SEG+0x360>)
 8000ade:	f001 f83e 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	48ad      	ldr	r0, [pc, #692]	; (8000d9c <display7SEG+0x360>)
 8000ae8:	f001 f839 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2110      	movs	r1, #16
 8000af0:	48aa      	ldr	r0, [pc, #680]	; (8000d9c <display7SEG+0x360>)
 8000af2:	f001 f834 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2120      	movs	r1, #32
 8000afa:	48a8      	ldr	r0, [pc, #672]	; (8000d9c <display7SEG+0x360>)
 8000afc:	f001 f82f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	48a5      	ldr	r0, [pc, #660]	; (8000d9c <display7SEG+0x360>)
 8000b06:	f001 f82a 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000b0a:	e143      	b.n	8000d94 <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2101      	movs	r1, #1
 8000b10:	48a2      	ldr	r0, [pc, #648]	; (8000d9c <display7SEG+0x360>)
 8000b12:	f001 f824 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	48a0      	ldr	r0, [pc, #640]	; (8000d9c <display7SEG+0x360>)
 8000b1c:	f001 f81f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2104      	movs	r1, #4
 8000b24:	489d      	ldr	r0, [pc, #628]	; (8000d9c <display7SEG+0x360>)
 8000b26:	f001 f81a 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	489b      	ldr	r0, [pc, #620]	; (8000d9c <display7SEG+0x360>)
 8000b30:	f001 f815 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	4898      	ldr	r0, [pc, #608]	; (8000d9c <display7SEG+0x360>)
 8000b3a:	f001 f810 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2120      	movs	r1, #32
 8000b42:	4896      	ldr	r0, [pc, #600]	; (8000d9c <display7SEG+0x360>)
 8000b44:	f001 f80b 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	4893      	ldr	r0, [pc, #588]	; (8000d9c <display7SEG+0x360>)
 8000b4e:	f001 f806 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000b52:	e11f      	b.n	8000d94 <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	4890      	ldr	r0, [pc, #576]	; (8000d9c <display7SEG+0x360>)
 8000b5a:	f001 f800 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	488e      	ldr	r0, [pc, #568]	; (8000d9c <display7SEG+0x360>)
 8000b64:	f000 fffb 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	488b      	ldr	r0, [pc, #556]	; (8000d9c <display7SEG+0x360>)
 8000b6e:	f000 fff6 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2108      	movs	r1, #8
 8000b76:	4889      	ldr	r0, [pc, #548]	; (8000d9c <display7SEG+0x360>)
 8000b78:	f000 fff1 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	4886      	ldr	r0, [pc, #536]	; (8000d9c <display7SEG+0x360>)
 8000b82:	f000 ffec 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2120      	movs	r1, #32
 8000b8a:	4884      	ldr	r0, [pc, #528]	; (8000d9c <display7SEG+0x360>)
 8000b8c:	f000 ffe7 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	4881      	ldr	r0, [pc, #516]	; (8000d9c <display7SEG+0x360>)
 8000b96:	f000 ffe2 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000b9a:	e0fb      	b.n	8000d94 <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	487e      	ldr	r0, [pc, #504]	; (8000d9c <display7SEG+0x360>)
 8000ba2:	f000 ffdc 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2102      	movs	r1, #2
 8000baa:	487c      	ldr	r0, [pc, #496]	; (8000d9c <display7SEG+0x360>)
 8000bac:	f000 ffd7 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4879      	ldr	r0, [pc, #484]	; (8000d9c <display7SEG+0x360>)
 8000bb6:	f000 ffd2 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4877      	ldr	r0, [pc, #476]	; (8000d9c <display7SEG+0x360>)
 8000bc0:	f000 ffcd 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4874      	ldr	r0, [pc, #464]	; (8000d9c <display7SEG+0x360>)
 8000bca:	f000 ffc8 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4872      	ldr	r0, [pc, #456]	; (8000d9c <display7SEG+0x360>)
 8000bd4:	f000 ffc3 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	486f      	ldr	r0, [pc, #444]	; (8000d9c <display7SEG+0x360>)
 8000bde:	f000 ffbe 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000be2:	e0d7      	b.n	8000d94 <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	486c      	ldr	r0, [pc, #432]	; (8000d9c <display7SEG+0x360>)
 8000bea:	f000 ffb8 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	486a      	ldr	r0, [pc, #424]	; (8000d9c <display7SEG+0x360>)
 8000bf4:	f000 ffb3 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4867      	ldr	r0, [pc, #412]	; (8000d9c <display7SEG+0x360>)
 8000bfe:	f000 ffae 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	4865      	ldr	r0, [pc, #404]	; (8000d9c <display7SEG+0x360>)
 8000c08:	f000 ffa9 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4862      	ldr	r0, [pc, #392]	; (8000d9c <display7SEG+0x360>)
 8000c12:	f000 ffa4 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4860      	ldr	r0, [pc, #384]	; (8000d9c <display7SEG+0x360>)
 8000c1c:	f000 ff9f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	485d      	ldr	r0, [pc, #372]	; (8000d9c <display7SEG+0x360>)
 8000c26:	f000 ff9a 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000c2a:	e0b3      	b.n	8000d94 <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	485a      	ldr	r0, [pc, #360]	; (8000d9c <display7SEG+0x360>)
 8000c32:	f000 ff94 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4858      	ldr	r0, [pc, #352]	; (8000d9c <display7SEG+0x360>)
 8000c3c:	f000 ff8f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	4855      	ldr	r0, [pc, #340]	; (8000d9c <display7SEG+0x360>)
 8000c46:	f000 ff8a 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	4853      	ldr	r0, [pc, #332]	; (8000d9c <display7SEG+0x360>)
 8000c50:	f000 ff85 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2110      	movs	r1, #16
 8000c58:	4850      	ldr	r0, [pc, #320]	; (8000d9c <display7SEG+0x360>)
 8000c5a:	f000 ff80 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2120      	movs	r1, #32
 8000c62:	484e      	ldr	r0, [pc, #312]	; (8000d9c <display7SEG+0x360>)
 8000c64:	f000 ff7b 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	484b      	ldr	r0, [pc, #300]	; (8000d9c <display7SEG+0x360>)
 8000c6e:	f000 ff76 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000c72:	e08f      	b.n	8000d94 <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2101      	movs	r1, #1
 8000c78:	4848      	ldr	r0, [pc, #288]	; (8000d9c <display7SEG+0x360>)
 8000c7a:	f000 ff70 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	4846      	ldr	r0, [pc, #280]	; (8000d9c <display7SEG+0x360>)
 8000c84:	f000 ff6b 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4843      	ldr	r0, [pc, #268]	; (8000d9c <display7SEG+0x360>)
 8000c8e:	f000 ff66 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2108      	movs	r1, #8
 8000c96:	4841      	ldr	r0, [pc, #260]	; (8000d9c <display7SEG+0x360>)
 8000c98:	f000 ff61 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	483e      	ldr	r0, [pc, #248]	; (8000d9c <display7SEG+0x360>)
 8000ca2:	f000 ff5c 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2120      	movs	r1, #32
 8000caa:	483c      	ldr	r0, [pc, #240]	; (8000d9c <display7SEG+0x360>)
 8000cac:	f000 ff57 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	4839      	ldr	r0, [pc, #228]	; (8000d9c <display7SEG+0x360>)
 8000cb6:	f000 ff52 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000cba:	e06b      	b.n	8000d94 <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4836      	ldr	r0, [pc, #216]	; (8000d9c <display7SEG+0x360>)
 8000cc2:	f000 ff4c 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4834      	ldr	r0, [pc, #208]	; (8000d9c <display7SEG+0x360>)
 8000ccc:	f000 ff47 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4831      	ldr	r0, [pc, #196]	; (8000d9c <display7SEG+0x360>)
 8000cd6:	f000 ff42 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2108      	movs	r1, #8
 8000cde:	482f      	ldr	r0, [pc, #188]	; (8000d9c <display7SEG+0x360>)
 8000ce0:	f000 ff3d 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	482c      	ldr	r0, [pc, #176]	; (8000d9c <display7SEG+0x360>)
 8000cea:	f000 ff38 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	482a      	ldr	r0, [pc, #168]	; (8000d9c <display7SEG+0x360>)
 8000cf4:	f000 ff33 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4827      	ldr	r0, [pc, #156]	; (8000d9c <display7SEG+0x360>)
 8000cfe:	f000 ff2e 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000d02:	e047      	b.n	8000d94 <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	4824      	ldr	r0, [pc, #144]	; (8000d9c <display7SEG+0x360>)
 8000d0a:	f000 ff28 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2102      	movs	r1, #2
 8000d12:	4822      	ldr	r0, [pc, #136]	; (8000d9c <display7SEG+0x360>)
 8000d14:	f000 ff23 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	481f      	ldr	r0, [pc, #124]	; (8000d9c <display7SEG+0x360>)
 8000d1e:	f000 ff1e 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2108      	movs	r1, #8
 8000d26:	481d      	ldr	r0, [pc, #116]	; (8000d9c <display7SEG+0x360>)
 8000d28:	f000 ff19 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	481a      	ldr	r0, [pc, #104]	; (8000d9c <display7SEG+0x360>)
 8000d32:	f000 ff14 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <display7SEG+0x360>)
 8000d3c:	f000 ff0f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2140      	movs	r1, #64	; 0x40
 8000d44:	4815      	ldr	r0, [pc, #84]	; (8000d9c <display7SEG+0x360>)
 8000d46:	f000 ff0a 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000d4a:	e023      	b.n	8000d94 <display7SEG+0x358>
	default: //OFF
		HAL_GPIO_WritePin(GPIOB, SEG_A_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <display7SEG+0x360>)
 8000d52:	f000 ff04 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4810      	ldr	r0, [pc, #64]	; (8000d9c <display7SEG+0x360>)
 8000d5c:	f000 feff 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2104      	movs	r1, #4
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <display7SEG+0x360>)
 8000d66:	f000 fefa 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <display7SEG+0x360>)
 8000d70:	f000 fef5 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <display7SEG+0x360>)
 8000d7a:	f000 fef0 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <display7SEG+0x360>)
 8000d84:	f000 feeb 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <display7SEG+0x360>)
 8000d8e:	f000 fee6 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000d92:	bf00      	nop
	}
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010c00 	.word	0x40010c00

08000da0 <update7SEG>:

void update7SEG(int index){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	switch(index){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	f200 808c 	bhi.w	8000ec8 <update7SEG+0x128>
 8000db0:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <update7SEG+0x18>)
 8000db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db6:	bf00      	nop
 8000db8:	08000dc9 	.word	0x08000dc9
 8000dbc:	08000e09 	.word	0x08000e09
 8000dc0:	08000e49 	.word	0x08000e49
 8000dc4:	08000e89 	.word	0x08000e89
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dce:	4841      	ldr	r0, [pc, #260]	; (8000ed4 <update7SEG+0x134>)
 8000dd0:	f000 fec5 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	483e      	ldr	r0, [pc, #248]	; (8000ed4 <update7SEG+0x134>)
 8000ddc:	f000 febf 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	483b      	ldr	r0, [pc, #236]	; (8000ed4 <update7SEG+0x134>)
 8000de8:	f000 feb9 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df2:	4838      	ldr	r0, [pc, #224]	; (8000ed4 <update7SEG+0x134>)
 8000df4:	f000 feb3 	bl	8001b5e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 8000df8:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <update7SEG+0x138>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe1b 	bl	8000a3c <display7SEG>
		break;
 8000e06:	e060      	b.n	8000eca <update7SEG+0x12a>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <update7SEG+0x134>)
 8000e10:	f000 fea5 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	482e      	ldr	r0, [pc, #184]	; (8000ed4 <update7SEG+0x134>)
 8000e1c:	f000 fe9f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	482b      	ldr	r0, [pc, #172]	; (8000ed4 <update7SEG+0x134>)
 8000e28:	f000 fe99 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	4828      	ldr	r0, [pc, #160]	; (8000ed4 <update7SEG+0x134>)
 8000e34:	f000 fe93 	bl	8001b5e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 8000e38:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <update7SEG+0x138>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fdfb 	bl	8000a3c <display7SEG>
		break;
 8000e46:	e040      	b.n	8000eca <update7SEG+0x12a>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4e:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <update7SEG+0x134>)
 8000e50:	f000 fe85 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <update7SEG+0x134>)
 8000e5c:	f000 fe7f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e66:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <update7SEG+0x134>)
 8000e68:	f000 fe79 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <update7SEG+0x134>)
 8000e74:	f000 fe73 	bl	8001b5e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <update7SEG+0x138>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fddb 	bl	8000a3c <display7SEG>
		break;
 8000e86:	e020      	b.n	8000eca <update7SEG+0x12a>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8e:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <update7SEG+0x134>)
 8000e90:	f000 fe65 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <update7SEG+0x134>)
 8000e9c:	f000 fe5f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <update7SEG+0x134>)
 8000ea8:	f000 fe59 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <update7SEG+0x134>)
 8000eb4:	f000 fe53 	bl	8001b5e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <update7SEG+0x138>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fdbb 	bl	8000a3c <display7SEG>
		break;
 8000ec6:	e000      	b.n	8000eca <update7SEG+0x12a>
	default:
		break;
 8000ec8:	bf00      	nop
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	200000a8 	.word	0x200000a8

08000edc <updateCounterBuffer>:

void updateCounterBuffer(int counter1, int counter2){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	led_buffer[0] = counter1 / 10;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <updateCounterBuffer+0x70>)
 8000eea:	fb82 1203 	smull	r1, r2, r2, r3
 8000eee:	1092      	asrs	r2, r2, #2
 8000ef0:	17db      	asrs	r3, r3, #31
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <updateCounterBuffer+0x74>)
 8000ef6:	6013      	str	r3, [r2, #0]
	led_buffer[1] = counter1 % 10;
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <updateCounterBuffer+0x70>)
 8000efc:	fb83 2301 	smull	r2, r3, r3, r1
 8000f00:	109a      	asrs	r2, r3, #2
 8000f02:	17cb      	asrs	r3, r1, #31
 8000f04:	1ad2      	subs	r2, r2, r3
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	1aca      	subs	r2, r1, r3
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <updateCounterBuffer+0x74>)
 8000f12:	605a      	str	r2, [r3, #4]
	led_buffer[2] = counter2 / 10;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <updateCounterBuffer+0x70>)
 8000f18:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1c:	1092      	asrs	r2, r2, #2
 8000f1e:	17db      	asrs	r3, r3, #31
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <updateCounterBuffer+0x74>)
 8000f24:	6093      	str	r3, [r2, #8]
	led_buffer[3] = counter2 % 10;
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <updateCounterBuffer+0x70>)
 8000f2a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f2e:	109a      	asrs	r2, r3, #2
 8000f30:	17cb      	asrs	r3, r1, #31
 8000f32:	1ad2      	subs	r2, r2, r3
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	1aca      	subs	r2, r1, r3
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <updateCounterBuffer+0x74>)
 8000f40:	60da      	str	r2, [r3, #12]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	66666667 	.word	0x66666667
 8000f50:	200000a8 	.word	0x200000a8

08000f54 <controlTrafficLights>:

void controlTrafficLights(int index, int color){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
//	index = 0 -> W-E Traffic light
//  index = 1 -> N-S Traffic light
	switch(index){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <controlTrafficLights+0x18>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d03f      	beq.n	8000fea <controlTrafficLights+0x96>
		default:
			break;
		}
		break;
	default:
		break;
 8000f6a:	e080      	b.n	800106e <controlTrafficLights+0x11a>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d029      	beq.n	8000fc6 <controlTrafficLights+0x72>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	dc36      	bgt.n	8000fe6 <controlTrafficLights+0x92>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <controlTrafficLights+0x32>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d010      	beq.n	8000fa6 <controlTrafficLights+0x52>
			break;
 8000f84:	e02f      	b.n	8000fe6 <controlTrafficLights+0x92>
			HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2108      	movs	r1, #8
 8000f8a:	483b      	ldr	r0, [pc, #236]	; (8001078 <controlTrafficLights+0x124>)
 8000f8c:	f000 fde7 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2120      	movs	r1, #32
 8000f94:	4838      	ldr	r0, [pc, #224]	; (8001078 <controlTrafficLights+0x124>)
 8000f96:	f000 fde2 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_AMBER0_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4836      	ldr	r0, [pc, #216]	; (8001078 <controlTrafficLights+0x124>)
 8000fa0:	f000 fddd 	bl	8001b5e <HAL_GPIO_WritePin>
			break;
 8000fa4:	e020      	b.n	8000fe8 <controlTrafficLights+0x94>
			HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4833      	ldr	r0, [pc, #204]	; (8001078 <controlTrafficLights+0x124>)
 8000fac:	f000 fdd7 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4830      	ldr	r0, [pc, #192]	; (8001078 <controlTrafficLights+0x124>)
 8000fb6:	f000 fdd2 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_AMBER0_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	482e      	ldr	r0, [pc, #184]	; (8001078 <controlTrafficLights+0x124>)
 8000fc0:	f000 fdcd 	bl	8001b5e <HAL_GPIO_WritePin>
			break;
 8000fc4:	e010      	b.n	8000fe8 <controlTrafficLights+0x94>
			HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2108      	movs	r1, #8
 8000fca:	482b      	ldr	r0, [pc, #172]	; (8001078 <controlTrafficLights+0x124>)
 8000fcc:	f000 fdc7 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <controlTrafficLights+0x124>)
 8000fd6:	f000 fdc2 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_AMBER0_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4826      	ldr	r0, [pc, #152]	; (8001078 <controlTrafficLights+0x124>)
 8000fe0:	f000 fdbd 	bl	8001b5e <HAL_GPIO_WritePin>
			break;
 8000fe4:	e000      	b.n	8000fe8 <controlTrafficLights+0x94>
			break;
 8000fe6:	bf00      	nop
		break;
 8000fe8:	e041      	b.n	800106e <controlTrafficLights+0x11a>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d02b      	beq.n	8001048 <controlTrafficLights+0xf4>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	dc39      	bgt.n	800106a <controlTrafficLights+0x116>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <controlTrafficLights+0xb0>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d011      	beq.n	8001026 <controlTrafficLights+0xd2>
			break;
 8001002:	e032      	b.n	800106a <controlTrafficLights+0x116>
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	481b      	ldr	r0, [pc, #108]	; (8001078 <controlTrafficLights+0x124>)
 800100a:	f000 fda8 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001014:	4818      	ldr	r0, [pc, #96]	; (8001078 <controlTrafficLights+0x124>)
 8001016:	f000 fda2 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_AMBER1_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4816      	ldr	r0, [pc, #88]	; (8001078 <controlTrafficLights+0x124>)
 8001020:	f000 fd9d 	bl	8001b5e <HAL_GPIO_WritePin>
			break;
 8001024:	e022      	b.n	800106c <controlTrafficLights+0x118>
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4813      	ldr	r0, [pc, #76]	; (8001078 <controlTrafficLights+0x124>)
 800102c:	f000 fd97 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <controlTrafficLights+0x124>)
 8001038:	f000 fd91 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_AMBER1_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <controlTrafficLights+0x124>)
 8001042:	f000 fd8c 	bl	8001b5e <HAL_GPIO_WritePin>
			break;
 8001046:	e011      	b.n	800106c <controlTrafficLights+0x118>
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <controlTrafficLights+0x124>)
 800104e:	f000 fd86 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <controlTrafficLights+0x124>)
 800105a:	f000 fd80 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_AMBER1_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <controlTrafficLights+0x124>)
 8001064:	f000 fd7b 	bl	8001b5e <HAL_GPIO_WritePin>
			break;
 8001068:	e000      	b.n	800106c <controlTrafficLights+0x118>
			break;
 800106a:	bf00      	nop
		break;
 800106c:	bf00      	nop
	}
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010800 	.word	0x40010800

0800107c <clearTrafficLights>:

void clearTrafficLights(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2108      	movs	r1, #8
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <clearTrafficLights+0x48>)
 8001086:	f000 fd6a 	bl	8001b5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2120      	movs	r1, #32
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <clearTrafficLights+0x48>)
 8001090:	f000 fd65 	bl	8001b5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_AMBER0_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <clearTrafficLights+0x48>)
 800109a:	f000 fd60 	bl	8001b5e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <clearTrafficLights+0x48>)
 80010a4:	f000 fd5b 	bl	8001b5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <clearTrafficLights+0x48>)
 80010b0:	f000 fd55 	bl	8001b5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_AMBER1_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <clearTrafficLights+0x48>)
 80010ba:	f000 fd50 	bl	8001b5e <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010800 	.word	0x40010800

080010c8 <toggleRedLED>:

void toggleRedLED(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_RED0_Pin);
 80010cc:	2108      	movs	r1, #8
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <toggleRedLED+0x18>)
 80010d0:	f000 fd5d 	bl	8001b8e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin);
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <toggleRedLED+0x18>)
 80010d8:	f000 fd59 	bl	8001b8e <HAL_GPIO_TogglePin>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40010800 	.word	0x40010800

080010e4 <toggleGreenLED>:

void toggleGreenLED(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN0_Pin);
 80010e8:	2120      	movs	r1, #32
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <toggleGreenLED+0x1c>)
 80010ec:	f000 fd4f 	bl	8001b8e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin);
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <toggleGreenLED+0x1c>)
 80010f6:	f000 fd4a 	bl	8001b8e <HAL_GPIO_TogglePin>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800

08001104 <toggleAmberLED>:

void toggleAmberLED(){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_AMBER0_Pin);
 8001108:	2110      	movs	r1, #16
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <toggleAmberLED+0x18>)
 800110c:	f000 fd3f 	bl	8001b8e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, LED_AMBER1_Pin);
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4802      	ldr	r0, [pc, #8]	; (800111c <toggleAmberLED+0x18>)
 8001114:	f000 fd3b 	bl	8001b8e <HAL_GPIO_TogglePin>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010800 	.word	0x40010800

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f000 fa18 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f814 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 f89a 	bl	8001264 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001130:	f000 f84c 	bl	80011cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <main+0x2c>)
 8001136:	f001 f971 	bl	800241c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <main+0x30>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	fsm_automatic_run();
 8001140:	f7ff f8c2 	bl	80002c8 <fsm_automatic_run>
	fsm_manual_run();
 8001144:	f7ff fb18 	bl	8000778 <fsm_manual_run>
	fsm_automatic_run();
 8001148:	e7fa      	b.n	8001140 <main+0x20>
 800114a:	bf00      	nop
 800114c:	200000bc 	.word	0x200000bc
 8001150:	200000a4 	.word	0x200000a4

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b090      	sub	sp, #64	; 0x40
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	2228      	movs	r2, #40	; 0x28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fcf2 	bl	8002b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117a:	2301      	movs	r3, #1
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	2310      	movs	r3, #16
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd18 	bl	8001bc0 <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001196:	f000 f8ee 	bl	8001376 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	230f      	movs	r3, #15
 800119c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 ff86 	bl	80020c4 <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011be:	f000 f8da 	bl	8001376 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3740      	adds	r7, #64	; 0x40
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_TIM2_Init+0x94>)
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_TIM2_Init+0x94>)
 80011f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_TIM2_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_TIM2_Init+0x94>)
 8001200:	2209      	movs	r2, #9
 8001202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_TIM2_Init+0x94>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_TIM2_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <MX_TIM2_Init+0x94>)
 8001212:	f001 f8b3 	bl	800237c <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800121c:	f000 f8ab 	bl	8001376 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_TIM2_Init+0x94>)
 800122e:	f001 fa49 	bl	80026c4 <HAL_TIM_ConfigClockSource>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001238:	f000 f89d 	bl	8001376 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_TIM2_Init+0x94>)
 800124a:	f001 fc15 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001254:	f000 f88f 	bl	8001376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000bc 	.word	0x200000bc

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_GPIO_Init+0xd0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <MX_GPIO_Init+0xd0>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_GPIO_Init+0xd0>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MX_GPIO_Init+0xd0>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a27      	ldr	r2, [pc, #156]	; (8001334 <MX_GPIO_Init+0xd0>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <MX_GPIO_Init+0xd0>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MX_GPIO_Init+0xd0>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <MX_GPIO_Init+0xd0>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_GPIO_Init+0xd0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin|LED_AMBER0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
 80012c0:	2200      	movs	r2, #0
 80012c2:	f24f 11f8 	movw	r1, #61944	; 0xf1f8
 80012c6:	481c      	ldr	r0, [pc, #112]	; (8001338 <MX_GPIO_Init+0xd4>)
 80012c8:	f000 fc49 	bl	8001b5e <HAL_GPIO_WritePin>
                          |LED_AMBER1_Pin|LED_GREEN1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 80012cc:	2200      	movs	r2, #0
 80012ce:	217f      	movs	r1, #127	; 0x7f
 80012d0:	481a      	ldr	r0, [pc, #104]	; (800133c <MX_GPIO_Init+0xd8>)
 80012d2:	f000 fc44 	bl	8001b5e <HAL_GPIO_WritePin>
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BT0_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = BT0_Pin|BT1_Pin|BT2_Pin;
 80012d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4815      	ldr	r0, [pc, #84]	; (8001340 <MX_GPIO_Init+0xdc>)
 80012ec:	f000 faa4 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED0_Pin LED_AMBER0_Pin LED_GREEN0_Pin LED_RED1_Pin
                           LED_AMBER1_Pin LED_GREEN1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED0_Pin|LED_AMBER0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
 80012f0:	f24f 13f8 	movw	r3, #61944	; 0xf1f8
 80012f4:	613b      	str	r3, [r7, #16]
                          |LED_AMBER1_Pin|LED_GREEN1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2302      	movs	r3, #2
 8001300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <MX_GPIO_Init+0xd4>)
 800130a:	f000 fa95 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 800130e:	237f      	movs	r3, #127	; 0x7f
 8001310:	613b      	str	r3, [r7, #16]
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2302      	movs	r3, #2
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_GPIO_Init+0xd8>)
 8001326:	f000 fa87 	bl	8001838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40010800 	.word	0x40010800
 800133c:	40010c00 	.word	0x40010c00
 8001340:	40011000 	.word	0x40011000

08001344 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	timerRun(0);
 800134c:	2000      	movs	r0, #0
 800134e:	f000 f837 	bl	80013c0 <timerRun>
    timerRun(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 f834 	bl	80013c0 <timerRun>
    timerRun(2);
 8001358:	2002      	movs	r0, #2
 800135a:	f000 f831 	bl	80013c0 <timerRun>
    timerRun(3);
 800135e:	2003      	movs	r0, #3
 8001360:	f000 f82e 	bl	80013c0 <timerRun>
    timerRun(4);
 8001364:	2004      	movs	r0, #4
 8001366:	f000 f82b 	bl	80013c0 <timerRun>
	getKeyInput();
 800136a:	f7fe ff19 	bl	80001a0 <getKeyInput>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137a:	b672      	cpsid	i
}
 800137c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137e:	e7fe      	b.n	800137e <Error_Handler+0x8>

08001380 <setTimer>:
#define TICK 10

int timer_counter[16] = {0};
int timer_flag[16] = {0};

void setTimer(int duration, int id){
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	timer_counter[id] = duration/TICK;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <setTimer+0x34>)
 800138e:	fb82 1203 	smull	r1, r2, r2, r3
 8001392:	1092      	asrs	r2, r2, #2
 8001394:	17db      	asrs	r3, r3, #31
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <setTimer+0x38>)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[id] = 0;
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <setTimer+0x3c>)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2100      	movs	r1, #0
 80013a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	66666667 	.word	0x66666667
 80013b8:	20000104 	.word	0x20000104
 80013bc:	20000144 	.word	0x20000144

080013c0 <timerRun>:
void timerRun(int id){
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if(timer_counter[id] > 0){
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <timerRun+0x48>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd13      	ble.n	80013fc <timerRun+0x3c>
		timer_counter[id]--;
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <timerRun+0x48>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	490a      	ldr	r1, [pc, #40]	; (8001408 <timerRun+0x48>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[id] <= 0){
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <timerRun+0x48>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dc04      	bgt.n	80013fc <timerRun+0x3c>
			timer_flag[id] = 1;
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <timerRun+0x4c>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2101      	movs	r1, #1
 80013f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000104 	.word	0x20000104
 800140c:	20000144 	.word	0x20000144

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_MspInit+0x40>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_MspInit+0x40>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_MspInit+0x40>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_MspInit+0x40>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_MspInit+0x40>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_MspInit+0x40>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001464:	d113      	bne.n	800148e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_TIM_Base_MspInit+0x44>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_TIM_Base_MspInit+0x44>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_TIM_Base_MspInit+0x44>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	201c      	movs	r0, #28
 8001484:	f000 f9a1 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001488:	201c      	movs	r0, #28
 800148a:	f000 f9ba 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 f87f 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM2_IRQHandler+0x10>)
 80014f2:	f000 ffdf 	bl	80024b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000bc 	.word	0x200000bc

08001500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff fff8 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001512:	490c      	ldr	r1, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001528:	4c09      	ldr	r4, [pc, #36]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f001 fb11 	bl	8002b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fdf1 	bl	8001120 <main>
  bx lr
 800153e:	4770      	bx	lr
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001548:	08002bec 	.word	0x08002bec
  ldr r2, =_sbss
 800154c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001550:	20000188 	.word	0x20000188

08001554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f923 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	200f      	movs	r0, #15
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff ff4c 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f93b 	bl	800181e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f903 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000068 	.word	0x20000068
 80015dc:	20000070 	.word	0x20000070
 80015e0:	2000006c 	.word	0x2000006c

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000070 	.word	0x20000070
 8001604:	20000184 	.word	0x20000184

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000184 	.word	0x20000184

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <__NVIC_EnableIRQ+0x34>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff90 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff2d 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff42 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff35 	bl	8001680 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b08b      	sub	sp, #44	; 0x2c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e161      	b.n	8001b10 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800184c:	2201      	movs	r2, #1
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8150 	bne.w	8001b0a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a97      	ldr	r2, [pc, #604]	; (8001acc <HAL_GPIO_Init+0x294>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d05e      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001874:	4a95      	ldr	r2, [pc, #596]	; (8001acc <HAL_GPIO_Init+0x294>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d875      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800187a:	4a95      	ldr	r2, [pc, #596]	; (8001ad0 <HAL_GPIO_Init+0x298>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d058      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001880:	4a93      	ldr	r2, [pc, #588]	; (8001ad0 <HAL_GPIO_Init+0x298>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d86f      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001886:	4a93      	ldr	r2, [pc, #588]	; (8001ad4 <HAL_GPIO_Init+0x29c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d052      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 800188c:	4a91      	ldr	r2, [pc, #580]	; (8001ad4 <HAL_GPIO_Init+0x29c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d869      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001892:	4a91      	ldr	r2, [pc, #580]	; (8001ad8 <HAL_GPIO_Init+0x2a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04c      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001898:	4a8f      	ldr	r2, [pc, #572]	; (8001ad8 <HAL_GPIO_Init+0x2a0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d863      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800189e:	4a8f      	ldr	r2, [pc, #572]	; (8001adc <HAL_GPIO_Init+0x2a4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d046      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 80018a4:	4a8d      	ldr	r2, [pc, #564]	; (8001adc <HAL_GPIO_Init+0x2a4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d85d      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d82a      	bhi.n	8001904 <HAL_GPIO_Init+0xcc>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d859      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <HAL_GPIO_Init+0x80>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	08001933 	.word	0x08001933
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	0800191f 	.word	0x0800191f
 80018c4:	08001961 	.word	0x08001961
 80018c8:	08001967 	.word	0x08001967
 80018cc:	08001967 	.word	0x08001967
 80018d0:	08001967 	.word	0x08001967
 80018d4:	08001967 	.word	0x08001967
 80018d8:	08001967 	.word	0x08001967
 80018dc:	08001967 	.word	0x08001967
 80018e0:	08001967 	.word	0x08001967
 80018e4:	08001967 	.word	0x08001967
 80018e8:	08001967 	.word	0x08001967
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001967 	.word	0x08001967
 80018f4:	08001967 	.word	0x08001967
 80018f8:	08001967 	.word	0x08001967
 80018fc:	08001915 	.word	0x08001915
 8001900:	08001929 	.word	0x08001929
 8001904:	4a76      	ldr	r2, [pc, #472]	; (8001ae0 <HAL_GPIO_Init+0x2a8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190a:	e02c      	b.n	8001966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e029      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e024      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3308      	adds	r3, #8
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e01f      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	330c      	adds	r3, #12
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e01a      	b.n	8001968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e013      	b.n	8001968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	611a      	str	r2, [r3, #16]
          break;
 8001952:	e009      	b.n	8001968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	615a      	str	r2, [r3, #20]
          break;
 800195e:	e003      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x130>
          break;
 8001966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d801      	bhi.n	8001972 <HAL_GPIO_Init+0x13a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_Init+0x13e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d802      	bhi.n	8001984 <HAL_GPIO_Init+0x14c>
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x152>
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	3b08      	subs	r3, #8
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	210f      	movs	r1, #15
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	431a      	orrs	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80a9 	beq.w	8001b0a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b8:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d0:	4a45      	ldr	r2, [pc, #276]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3d      	ldr	r2, [pc, #244]	; (8001aec <HAL_GPIO_Init+0x2b4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00d      	beq.n	8001a18 <HAL_GPIO_Init+0x1e0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3c      	ldr	r2, [pc, #240]	; (8001af0 <HAL_GPIO_Init+0x2b8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d007      	beq.n	8001a14 <HAL_GPIO_Init+0x1dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3b      	ldr	r2, [pc, #236]	; (8001af4 <HAL_GPIO_Init+0x2bc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_GPIO_Init+0x1d8>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e004      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	f002 0203 	and.w	r2, r2, #3
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	4093      	lsls	r3, r2
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a2a:	492f      	ldr	r1, [pc, #188]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a44:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	492b      	ldr	r1, [pc, #172]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4927      	ldr	r1, [pc, #156]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4921      	ldr	r1, [pc, #132]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	491d      	ldr	r1, [pc, #116]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4917      	ldr	r1, [pc, #92]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4913      	ldr	r1, [pc, #76]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01f      	beq.n	8001afc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	490d      	ldr	r1, [pc, #52]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
 8001ac8:	e01f      	b.n	8001b0a <HAL_GPIO_Init+0x2d2>
 8001aca:	bf00      	nop
 8001acc:	10320000 	.word	0x10320000
 8001ad0:	10310000 	.word	0x10310000
 8001ad4:	10220000 	.word	0x10220000
 8001ad8:	10210000 	.word	0x10210000
 8001adc:	10120000 	.word	0x10120000
 8001ae0:	10110000 	.word	0x10110000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40011000 	.word	0x40011000
 8001af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_GPIO_Init+0x2f4>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <HAL_GPIO_Init+0x2f4>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae96 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	372c      	adds	r7, #44	; 0x2c
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	807b      	strh	r3, [r7, #2]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b6e:	787b      	ldrb	r3, [r7, #1]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7a:	e003      	b.n	8001b84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	041a      	lsls	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	041a      	lsls	r2, r3, #16
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	400b      	ands	r3, r1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e272      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8087 	beq.w	8001cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bec:	4b8f      	ldr	r3, [pc, #572]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
 8001bf8:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d10b      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c06:	4b89      	ldr	r3, [pc, #548]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06c      	beq.n	8001cec <HAL_RCC_OscConfig+0x12c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d168      	bne.n	8001cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e24c      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x76>
 8001c28:	4b80      	ldr	r3, [pc, #512]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a7f      	ldr	r2, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e02e      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b78      	ldr	r3, [pc, #480]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a77      	ldr	r2, [pc, #476]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0xbc>
 8001c62:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a71      	ldr	r2, [pc, #452]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	4b6b      	ldr	r3, [pc, #428]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6a      	ldr	r2, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a67      	ldr	r2, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fcb4 	bl	8001608 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fcb0 	bl	8001608 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e200      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe4>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fca0 	bl	8001608 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fc9c 	bl	8001608 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1ec      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x10c>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfa:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d06:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x18c>
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x176>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1c0      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4939      	ldr	r1, [pc, #228]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e03a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <HAL_RCC_OscConfig+0x270>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fc55 	bl	8001608 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff fc51 	bl	8001608 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e1a1      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4927      	ldr	r1, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_OscConfig+0x270>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fc34 	bl	8001608 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fc30 	bl	8001608 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e180      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03a      	beq.n	8001e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d019      	beq.n	8001e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fc14 	bl	8001608 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fc10 	bl	8001608 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e160      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fa9c 	bl	8002340 <RCC_Delay>
 8001e08:	e01c      	b.n	8001e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff fbfa 	bl	8001608 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e16:	e00f      	b.n	8001e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fbf6 	bl	8001608 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d908      	bls.n	8001e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e146      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	42420000 	.word	0x42420000
 8001e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e38:	4b92      	ldr	r3, [pc, #584]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e9      	bne.n	8001e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a6 	beq.w	8001f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e56:	4b8b      	ldr	r3, [pc, #556]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10d      	bne.n	8001e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b88      	ldr	r3, [pc, #544]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a87      	ldr	r2, [pc, #540]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]
 8001e6e:	4b85      	ldr	r3, [pc, #532]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b82      	ldr	r3, [pc, #520]	; (8002088 <HAL_RCC_OscConfig+0x4c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d118      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x4c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x4c8>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fbb7 	bl	8001608 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9e:	f7ff fbb3 	bl	8001608 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b64      	cmp	r3, #100	; 0x64
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e103      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	4b75      	ldr	r3, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x4c8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x312>
 8001ec4:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a6e      	ldr	r2, [pc, #440]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e02d      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x334>
 8001eda:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a69      	ldr	r2, [pc, #420]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	4b67      	ldr	r3, [pc, #412]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a66      	ldr	r2, [pc, #408]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	e01c      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x356>
 8001efc:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a60      	ldr	r2, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a5d      	ldr	r2, [pc, #372]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001f16:	4b5b      	ldr	r3, [pc, #364]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a5a      	ldr	r2, [pc, #360]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	4b58      	ldr	r3, [pc, #352]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a57      	ldr	r2, [pc, #348]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d015      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff fb67 	bl	8001608 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff fb63 	bl	8001608 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0b1      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ee      	beq.n	8001f3e <HAL_RCC_OscConfig+0x37e>
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb51 	bl	8001608 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fb4d 	bl	8001608 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e09b      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ee      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a3b      	ldr	r2, [pc, #236]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8087 	beq.w	80020b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa8:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d061      	beq.n	8002078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d146      	bne.n	800204a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x4cc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fb21 	bl	8001608 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fb1d 	bl	8001608 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e06d      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d108      	bne.n	8002004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4921      	ldr	r1, [pc, #132]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a19      	ldr	r1, [r3, #32]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	430b      	orrs	r3, r1
 8002016:	491b      	ldr	r1, [pc, #108]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x4cc>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff faf1 	bl	8001608 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff faed 	bl	8001608 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e03d      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x46a>
 8002048:	e035      	b.n	80020b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_RCC_OscConfig+0x4cc>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fada 	bl	8001608 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff fad6 	bl	8001608 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e026      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x498>
 8002076:	e01e      	b.n	80020b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e019      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x500>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0d0      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d910      	bls.n	8002108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4965      	ldr	r1, [pc, #404]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0b8      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800212a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002142:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	494d      	ldr	r1, [pc, #308]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d040      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d115      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07f      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e073      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06b      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4936      	ldr	r1, [pc, #216]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b4:	f7ff fa28 	bl	8001608 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7ff fa24 	bl	8001608 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e053      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 020c 	and.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1eb      	bne.n	80021bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d210      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	4922      	ldr	r1, [pc, #136]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e032      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4916      	ldr	r1, [pc, #88]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002252:	f000 f821 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490a      	ldr	r1, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1cc>)
 800226c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1d0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f986 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000
 8002288:	40021000 	.word	0x40021000
 800228c:	08002bc0 	.word	0x08002bc0
 8002290:	20000068 	.word	0x20000068
 8002294:	2000006c 	.word	0x2000006c

08002298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCC_GetSysClockFreq+0x94>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x30>
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x36>
 80022c6:	e027      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ca:	613b      	str	r3, [r7, #16]
      break;
 80022cc:	e027      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0c9b      	lsrs	r3, r3, #18
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_GetSysClockFreq+0x94>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0c5b      	lsrs	r3, r3, #17
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fa:	fb03 f202 	mul.w	r2, r3, r2
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	e004      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <HAL_RCC_GetSysClockFreq+0xa4>)
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	613b      	str	r3, [r7, #16]
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	613b      	str	r3, [r7, #16]
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	693b      	ldr	r3, [r7, #16]
}
 8002320:	4618      	mov	r0, r3
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	007a1200 	.word	0x007a1200
 8002334:	08002bd0 	.word	0x08002bd0
 8002338:	08002be0 	.word	0x08002be0
 800233c:	003d0900 	.word	0x003d0900

08002340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <RCC_Delay+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <RCC_Delay+0x38>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800235c:	bf00      	nop
  }
  while (Delay --);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <RCC_Delay+0x1c>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000068 	.word	0x20000068
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e041      	b.n	8002412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff f856 	bl	8001454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f000 fa6e 	bl	800289c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e035      	b.n	80024a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_TIM_Base_Start_IT+0x90>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_TIM_Base_Start_IT+0x4e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d004      	beq.n	800246a <HAL_TIM_Base_Start_IT+0x4e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d111      	bne.n	800248e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b06      	cmp	r3, #6
 800247a:	d010      	beq.n	800249e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248c:	e007      	b.n	800249e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40000400 	.word	0x40000400

080024b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d122      	bne.n	8002510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d11b      	bne.n	8002510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0202 	mvn.w	r2, #2
 80024e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f9b4 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9a7 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f9b6 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b04      	cmp	r3, #4
 800251c:	d122      	bne.n	8002564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b04      	cmp	r3, #4
 800252a:	d11b      	bne.n	8002564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0204 	mvn.w	r2, #4
 8002534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f98a 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f97d 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f98c 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b08      	cmp	r3, #8
 8002570:	d122      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b08      	cmp	r3, #8
 800257e:	d11b      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0208 	mvn.w	r2, #8
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2204      	movs	r2, #4
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f960 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f953 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f962 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d122      	bne.n	800260c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0210 	mvn.w	r2, #16
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2208      	movs	r2, #8
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f936 	bl	8002864 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f929 	bl	8002852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f938 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d107      	bne.n	8002638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0201 	mvn.w	r2, #1
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fe86 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b80      	cmp	r3, #128	; 0x80
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b80      	cmp	r3, #128	; 0x80
 8002652:	d107      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa6b 	bl	8002b3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d107      	bne.n	8002690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8fc 	bl	8002888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b20      	cmp	r3, #32
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d107      	bne.n	80026bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0220 	mvn.w	r2, #32
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa36 	bl	8002b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_ConfigClockSource+0x1c>
 80026dc:	2302      	movs	r3, #2
 80026de:	e0b4      	b.n	800284a <HAL_TIM_ConfigClockSource+0x186>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002718:	d03e      	beq.n	8002798 <HAL_TIM_ConfigClockSource+0xd4>
 800271a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271e:	f200 8087 	bhi.w	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002726:	f000 8086 	beq.w	8002836 <HAL_TIM_ConfigClockSource+0x172>
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272e:	d87f      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b70      	cmp	r3, #112	; 0x70
 8002732:	d01a      	beq.n	800276a <HAL_TIM_ConfigClockSource+0xa6>
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d87b      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b60      	cmp	r3, #96	; 0x60
 800273a:	d050      	beq.n	80027de <HAL_TIM_ConfigClockSource+0x11a>
 800273c:	2b60      	cmp	r3, #96	; 0x60
 800273e:	d877      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b50      	cmp	r3, #80	; 0x50
 8002742:	d03c      	beq.n	80027be <HAL_TIM_ConfigClockSource+0xfa>
 8002744:	2b50      	cmp	r3, #80	; 0x50
 8002746:	d873      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d058      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x13a>
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d86f      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b30      	cmp	r3, #48	; 0x30
 8002752:	d064      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d86b      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b20      	cmp	r3, #32
 800275a:	d060      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d867      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05c      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	2b10      	cmp	r3, #16
 8002766:	d05a      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 8002768:	e062      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	f000 f95e 	bl	8002a3a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800278c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	609a      	str	r2, [r3, #8]
      break;
 8002796:	e04f      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	f000 f947 	bl	8002a3a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ba:	609a      	str	r2, [r3, #8]
      break;
 80027bc:	e03c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ca:	461a      	mov	r2, r3
 80027cc:	f000 f8be 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2150      	movs	r1, #80	; 0x50
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f915 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027dc:	e02c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 f8dc 	bl	80029a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2160      	movs	r1, #96	; 0x60
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f905 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027fc:	e01c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280a:	461a      	mov	r2, r3
 800280c:	f000 f89e 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2140      	movs	r1, #64	; 0x40
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f8f5 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 800281c:	e00c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f000 f8ec 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 800282e:	e003      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e000      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
	...

0800289c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d003      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d108      	bne.n	80028d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d003      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d108      	bne.n	8002900 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	615a      	str	r2, [r3, #20]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400

0800294c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 030a 	bic.w	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0210 	bic.w	r2, r3, #16
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f043 0307 	orr.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e041      	b.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10c      	bne.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400

08002b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <memset>:
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4402      	add	r2, r0
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d100      	bne.n	8002b56 <memset+0xa>
 8002b54:	4770      	bx	lr
 8002b56:	f803 1b01 	strb.w	r1, [r3], #1
 8002b5a:	e7f9      	b.n	8002b50 <memset+0x4>

08002b5c <__libc_init_array>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	2600      	movs	r6, #0
 8002b60:	4d0c      	ldr	r5, [pc, #48]	; (8002b94 <__libc_init_array+0x38>)
 8002b62:	4c0d      	ldr	r4, [pc, #52]	; (8002b98 <__libc_init_array+0x3c>)
 8002b64:	1b64      	subs	r4, r4, r5
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	42a6      	cmp	r6, r4
 8002b6a:	d109      	bne.n	8002b80 <__libc_init_array+0x24>
 8002b6c:	f000 f81a 	bl	8002ba4 <_init>
 8002b70:	2600      	movs	r6, #0
 8002b72:	4d0a      	ldr	r5, [pc, #40]	; (8002b9c <__libc_init_array+0x40>)
 8002b74:	4c0a      	ldr	r4, [pc, #40]	; (8002ba0 <__libc_init_array+0x44>)
 8002b76:	1b64      	subs	r4, r4, r5
 8002b78:	10a4      	asrs	r4, r4, #2
 8002b7a:	42a6      	cmp	r6, r4
 8002b7c:	d105      	bne.n	8002b8a <__libc_init_array+0x2e>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b84:	4798      	blx	r3
 8002b86:	3601      	adds	r6, #1
 8002b88:	e7ee      	b.n	8002b68 <__libc_init_array+0xc>
 8002b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8e:	4798      	blx	r3
 8002b90:	3601      	adds	r6, #1
 8002b92:	e7f2      	b.n	8002b7a <__libc_init_array+0x1e>
 8002b94:	08002be4 	.word	0x08002be4
 8002b98:	08002be4 	.word	0x08002be4
 8002b9c:	08002be4 	.word	0x08002be4
 8002ba0:	08002be8 	.word	0x08002be8

08002ba4 <_init>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

08002bb0 <_fini>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr
